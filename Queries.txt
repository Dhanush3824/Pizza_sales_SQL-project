-- 1.retrive total no.of orders placed

SELECT 
    COUNT(order_id) AS total_orders
FROM
    orders;

-- 2.Calculate the total revenue generated from pizza sales.

SELECT 
    ROUND(SUM(orders_details.quantity * pizzas.price),
            2) AS total_sales
FROM
    orders_details
        JOIN
    pizzas ON pizzas.pizza_id = orders_details.pizza_id;
    
-- 3.Identify the highest-priced pizza.

SELECT 
    pizza_types.name, pizzas.price
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
ORDER BY pizzas.price DESC
LIMIT 1;

-- 4.Identify the most common pizza size ordered.

SELECT 
    pizzas.size,
    COUNT(orders_details.order_details_id) AS order_count
FROM
    pizzas
        JOIN
    orders_details ON pizzas.pizza_id = orders_details.pizza_id
GROUP BY pizzas.size
ORDER BY order_count DESC
LIMIT 1;

-- 5.List the top 5 most ordered pizza types along with their quantities.orders

SELECT 
    pizza_types.NAME, SUM(orders_details.quantity) AS quantity
FROM
    PIZZA_TYPES
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    orders_details ON orders_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.name
ORDER BY quantity DESC
LIMIT 5;

-- 6.Join the necessary tables to find the total quantity of each pizza category ordered.

SELECT 
    pizza_types.category,
    SUM(orders_details.quantity) AS quantity
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    orders_details ON orders_details.pizza_id = pizzas.pizza_id
GROUP BY category
ORDER BY quantity DESC;

-- 7.Determine the distribution of orders by hour of the day.

SELECT 
    HOUR(order_time) as hours, COUNT(order_id) as order_count
FROM
    orders
GROUP BY HOUR(order_time);

-- 8.Join relevant tables to find the category-wise distribution of pizzas.

SELECT 
    pizza_types.category, COUNT(pizza_types.name)
FROM
    pizza_types
GROUP BY category;

-- 9.Group the orders by date and calculate the average number of pizzas ordered per day.

SELECT 
    ROUND(AVG(quantity), 0) as avg_pizzas_orders_per_day
FROM
    (SELECT 
        orders.order_date AS order_date,
            SUM(orders_details.quantity) AS quantity
    FROM
        orders
    JOIN orders_details ON orders.order_id = orders_details.order_id
    GROUP BY order_date) AS order_quantity;

-- 10.Determine the top 3 most ordered pizza types based on revenue.

SELECT 
    pizza_types.name AS pizza_name,
    SUM(orders_details.quantity * pizzas.price) AS revenue
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    orders_details ON orders_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.name
ORDER BY revenue DESC
LIMIT 3;

-- 11.Calculate the percentage contribution of each pizza type to total revenue.

SELECT 
    pizza_types.category ,
    round((SUM(orders_details.quantity * pizzas.price) / (select round(SUM(orders_details.quantity * pizzas.price),2) as
    total_sales from orders_details join pizzas on orders_details.pizza_id = pizzas.pizza_id)) * 100,2) as revenue_percentage
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    orders_details ON orders_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category order by revenue_percentage desc;


-- 12.Analyze the cumulative revenue generated over time.

select
	order_date,sum(revenue) over(order by order_date) as cumulative_revenue
    from
	(select
		orders.order_date,sum(orders_details.quantity* pizzas.price) as revenue
        from 
			orders_details 
			join 
            pizzas on orders_details.pizza_id = pizzas.pizza_id 
            join
            orders on orders.order_id= orders_details.order_id 
		group by orders.order_date) as sales; 
            
-- 13.Determine the top 3 most ordered pizza types based on revenue for each pizza category.

select 
	category, name, revenue 
    from
		(select 
			category,name,revenue, rank() over(partition by category 
            order by revenue desc) as rev 
            from
				(select 
					pizza_types.category, pizza_types.name, sum(orders_details.quantity * pizzas.price) as revenue
	from 
		pizza_types 
		join 
        pizzas on pizza_types.pizza_type_id=pizzas.pizza_type_id 
        join
		orders_details on orders_details.pizza_id=pizzas.pizza_id
	group by pizza_types.category,pizza_types.name) as a) as b 
    where rev<=3; 
